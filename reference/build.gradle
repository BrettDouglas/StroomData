version = '0.1.8'

apply plugin: 'jacoco'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks = ['clean', 'jar']


File javaHome = new File(System.getProperty('java.home'))
logger.lifecycle "Using Java from $javaHome (version ${System.getProperty('java.version')})"

repositories {
    mavenLocal()
    mavenCentral()
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination "${buildDir}/reports/jacoco/html"
    }
}

check{
    dependsOn jacocoTestReport
}


test{
    finalizedBy jacocoTestReport
}

dependencies {
    compile 'log4j:log4j:1.2.17'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.eclipse.jetty.aggregate:jetty-all:9.2.2.v20140723'
    compile 'org.json:json:20140107'
    // compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    compile 'me.doubledutch:lazyjson:1.2.6'
    testCompile 'junit:junit:4.+'
    testCompile 'com.mashape.unirest:unirest-java:1.4.7'
    // testCompile 'org.mockito:mockito-core:1.10.8'
}

task clientJar(type: Jar){
    baseName="client"
    from(sourceSets.main.output) {
        include "me/doubledutch/stroom/client/*"
        include "me/doubledutch/stroom/client/function/*"
        include "me/doubledutch/lazy/*"
    }
  //  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Implementation-Title': 'Client Library', 'Implementation-Version': version
    }
    // into('site') {
    //    from 'site'
    // }
}

task queryJar(type: Jar){
    baseName="squery"
    from(sourceSets.main.output) {
        include "me/doubledutch/stroom/*"
        include "me/doubledutch/stroom/client/*"
        include "me/doubledutch/stroom/client/function/*"
        include "me/doubledutch/lazy/*"
        include "me/doubledutch/stroom/query/*"
        include "me/doubledutch/stroom/query/sql/*"
        include "me/doubledutch/stroom/query/sql/functions/*"
    }
     from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  //  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Implementation-Title': 'Client Library', 'Implementation-Version': version, 'Main-Class': 'me.doubledutch.stroom.query.QueryTool'
    }
    // into('site') {
    //    from 'site'
    // }
}


task clientJavadoc(type: Javadoc) {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    destinationDir = new File("${buildDir}/docs/clientapi")
    source = sourceSets.main.allJava
    classpath += configurations.compile
    exclude("me/doubledutch/stroom/streams")
    exclude("me/doubledutch/stroom/servlet")
    exclude("me/doubledutch/stroom/query")
    exclude("me/doubledutch/stroom/perf")
    exclude("me/doubledutch/stroom/filters")
    exclude("me/doubledutch/stroom/aggregates")
    exclude("me/doubledutch/lazy")
    exclude("me/doubledutch/stroom/*.java")
    // exclude("me/doubledutch/stroom")
    // include("me/doubledutch/stroom/client")
}

jar {
    def versionFile = file('./src/main/resources/stroom_version.properties')
 
    if(versionFile.canRead()){
        def Properties props=new Properties()
        props.load(new FileInputStream(versionFile))
        def buildNumber=props['BUILD_NUMBER'].toInteger()+1
        props['BUILD_NUMBER']=buildNumber.toString()
        props['BUILD_DATE']=new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'",TimeZone.getTimeZone("UTC")).toString()
        props['BUILD_VERSION']=version
        props.store(versionFile.newWriter(),null)
    }

     baseName="multihost"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Implementation-Title': 'Multi Host Reference Server', 'Implementation-Version': version, 'Main-Class': 'me.doubledutch.stroom.MultiHostServer'
    }
    into('site') {
        from 'site'
    }
}
